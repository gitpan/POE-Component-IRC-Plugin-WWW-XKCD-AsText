NAME
    POE::Component::IRC::Plugin::WWW::XKCD::AsText - read http://xkcd.com
    comics on IRC

SYNOPSIS
        use strict;
        use warnings;

        use POE qw(Component::IRC  Component::IRC::Plugin::WWW::XKCD::AsText);

        my $irc = POE::Component::IRC->spawn(
            nick        => 'XKCD',
            server      => 'irc.freenode.net',
            port        => 6667,
            ircname     => 'XKCD Bot',
        );

        POE::Session->create(
            package_states => [
                main => [ qw(_start irc_001) ],
            ],
        );

        $poe_kernel->run;

        sub _start {
            $irc->yield( register => 'all' );

            $irc->plugin_add(
                'XKCD' =>
                    POE::Component::IRC::Plugin::WWW::XKCD::AsText->new
            );

            $irc->yield( connect => {} );
        }

        sub irc_001 {
            $_[KERNEL]->post( $_[SENDER] => join => '#zofbot' );
        }

        <Zoffix_> XKCDBot, xkcd 1
        <XKCDBot> [[A boy sits in a barrel which is floating in an ocean.]]
        <XKCDBot>
        <XKCDBot> Boy: I wonder where I'll float next?
        <XKCDBot>
        <XKCDBot> [[The barrel drifts into the distance. Nothing else can be seen.]]
        <XKCDBot>
        <XKCDBot> {{Alt: Don't we all.}}

DESCRIPTION
    This module is a POE::Component::IRC plugin which uses
    POE::Component::IRC::Plugin for its base. It provides interface to read
    <http://xkcd.com> comics' transcriptions on IRC. It accepts input from
    public channel events, "/notice" messages as well as "/msg" (private
    messages); although that can be configured at will.

CONSTRUCTOR
  new
        # plain and simple
        $irc->plugin_add(
            'XKCD' => POE::Component::IRC::Plugin::WWW::XKCD::AsText->new
        );

        # juicy flavor
        $irc->plugin_add(
            'XKCD' =>
                POE::Component::IRC::Plugin::WWW::XKCD::AsText->new(
                    auto             => 1,
                    response_event   => 'irc_xkcd',
                    banned           => [ qr/aol\.com$/i ],
                    addressed        => 1,
                    trigger          => qr/^xkcd\s+(?=\S)/i,
                    listen_for_input => [ qw(public notice privmsg) ],
                    eat              => 1,
                    debug            => 0,
                )
        );

    The "new()" method constructs and returns a new
    "POE::Component::IRC::Plugin::WWW::XKCD::AsText" object suitable to be
    fed to POE::Component::IRC's "plugin_add" method. The constructor takes
    a few arguments, but *all of them are optional*. The possible
    arguments/values are as follows:

   auto
        ->new( auto => 0 );

    Optional. Takes either true or false values, specifies whether or not
    the plugin should auto respond to requests. When the "auto" argument is
    set to a true value plugin will respond to the person requesting a comic
    with the results automatically. When the "auto" argument is set to a
    false value plugin will not respond and you will have to listen to the
    events emited by the plugin to retrieve the results (see EMITED EVENTS
    section and "response_event" argument for details). Defaults to: 1.

   response_event
        ->new( response_event => 'event_name_to_recieve_results' );

    Optional. Takes a scalar string specifying the name of the event to emit
    when the comic's text is retrieved. See EMITED EVENTS section for more
    information. Defaults to: "irc_xkcd"

   banned
        ->new( banned => [ qr/aol\.com$/i ] );

    Optional. Takes an arrayref of regexes as a value. If the usermask of
    the person (or thing) requesting the comic matches any of the regexes
    listed in the "banned" arrayref, plugin will ignore the request.
    Defaults to: "[]" (no bans are set).

   trigger
        ->new( trigger => qr/^xkcd\s+(?=\S)/i );

    Optional. Takes a regex as an argument. Messages matching this regex
    will be considered as requests for a comic. See also addressed option
    below which is enabled by default. Note: the trigger will be removed
    from the message, therefore make sure your trigger doesn't match the
    actual data which is ment to be a comic ID number. Defaults to:
    "qr/^xkcd\s+(?=\S)/i"

   addressed
        ->new( addressed => 1 );

    Optional. Takes either true or false values. When set to a true value
    all the public messages must be *addressed to the bot*. In other words,
    if your bot's nickname is "XKCDBot" and your trigger is "qr/^xkcd\s+/"
    you would request the comic by saying "XKCDBot, xkcd 222". When
    addressed mode is turned on, the bot's nickname, including any
    whitespace and common punctuation character will be removed before
    matching the "trigger" (see above). When "addressed" argument it set to
    a false value, public messages will only have to match "trigger" regex
    in order to request the comic. Note: this argument has no effect on
    "/notice" and "/msg" requests. Defaults to: 1

   listen_for_input
        ->new( listen_for_input => [ qw(public  notice  privmsg) ] );

    Optional. Takes an arrayref as a value which can contain any of the
    three elements, namely "public", "notice" and "privmsg" which indicate
    which kind of input plugin should respond to. When the arrayref contains
    "public" element, plugin will respond to requests sent from messages in
    public channels (see "addressed" argument above for specifics). When the
    arrayref contains "notice" element plugin will respond to requests sent
    to it via "/notice" messages. When the arrayref contains "privmsg"
    element, the plugin will respond to requests sent to it via "/msg"
    (private messages). You can specify any of these. In other words,
    setting "( listen_for_input =" [ qr(notice privmsg) ] )> will enable
    comics only via "/notice" and "/msg" messages. Defaults to: "[ qw(public
    notice privmsg) ]"

   eat
        ->new( eat => 0 );

    Optional. If set to a false value plugin will return a "PCI_EAT_NONE"
    after responding. If eat is set to a true value, plugin will return a
    "PCI_EAT_ALL" after responding. See POE::Component::IRC::Plugin
    documentation for more information if you are interested. Defaults to: 1

   debug
        ->new( debug => 1 );

    Optional. Takes either a true or false value. When "debug" argument is
    set to a true value some debugging information will be printed out. When
    "debug" argument is set to a false value no debug info will be printed.
    Defaults to: 0.

EMITED EVENTS
  response_event
        $VAR1 = {
            'who' => 'Zoffix!n=Zoffix@unaffiliated/zoffix',
            'type' => 'public',
            'channel' => '#zofbot',
            'message' => 'XKCDBot, xkcd 333',
            'id' => '333',
            'text' => q|comic's text here|,
        };

    The event handler set up to handle the event, name of which you've
    specified in the "response_event" argument to the constructor (it
    defaults to "irc_xkcd") will recieve input every time comic request is
    completed. The input will come in the form of a hashref in "ARG0". The
    keys/values of that hashref are as follows:

   who
        { 'who' => 'Zoffix!n=Zoffix@unaffiliated/zoffix' }

    The "who" key will contain the usermask of the user who requested the
    comic.

   
        { 'type' => 'public' }

    The "type" key will contain the "type" of the message sent by the
    requestor. The possible values are: "public", "notice" and "privmsg"
    indicating that request was requested in public channel, via "/notice"
    and via "/msg" (private message) respectively.

   channel
        { 'channel' => '#zofbot' }

    The "channel" key will contain the name of the channel from which the
    request came from. This will only make sense when "type" key (see above)
    contains "public".

   message
        { 'message' => 'XKCDBot, kxcd 333', }

    The "message" key will contain the message which the user has sent to
    request the comic.

   id
        { 'id' => '333' }

    The "term" key will contain the ID of the comic being retrieved.

   text
        { 'text' => 'comic text goes here' }

    The "text" key will contain the text of the comic or an error message.
    You can differentiate the errors by checking if "error" key is set to a
    true value.

   error
        { 'error' => '1' }

    When "error" key is present it is an indication that an error occured
    during the retrieval of the comic (including non-existant comic IDs).
    The actual error message will be present in "text" key.

AUTHOR
    Zoffix Znet, "<zoffix at cpan.org>" (<http://zoffix.com>,
    <http://haslayout.net>)

BUGS
    Please report any bugs or feature requests to
    "bug-poe-component-irc-plugin-www-xkcd-astext at rt.cpan.org", or
    through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=POE-Component-IRC-Plugin
    -WWW-XKCD-AsText>. I will be notified, and then you'll automatically be
    notified of progress on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc POE::Component::IRC::Plugin::WWW::XKCD::AsText

    You can also look for information at:

    *   RT: CPAN's request tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=POE-Component-IRC-Plugin-W
        WW-XKCD-AsText>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/POE-Component-IRC-Plugin-WWW-XKCD-AsText>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/POE-Component-IRC-Plugin-WWW-XKCD-AsT
        ext>

    *   Search CPAN

        <http://search.cpan.org/dist/POE-Component-IRC-Plugin-WWW-XKCD-AsTex
        t>

COPYRIGHT & LICENSE
    Copyright 2008 Zoffix Znet, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

